# Nom du workflow qui apparaîtra dans l'interface GitHub Actions
name: CI Multi-Service (Build & Test)

# Déclenche ce workflow sur chaque push et pull request sur la branche 'main'
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Permet d'exécuter ce workflow manuellement depuis l'interface Actions
  workflow_dispatch:
permissions:
  contents: write # Permet d'écrire des fichiers (nécessaire pour la release)
  pull-requests: write # Permet de créer et modifier des Pull Requests (critique pour release-please)

# Définition des jobs (tâches) à exécuter
jobs:
  # -----------------------------------------------------------
  # JOB 1: Build et Tests Unitaires pour les services Java (Maven)
  # -----------------------------------------------------------
  java_build:
    name: Build Services Java (Maven)
    runs-on: ubuntu-latest

    env:
      JAVA_VERSION: '21'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Run Maven Build and Unit Tests
        run: mvn clean install

      - name: Upload Build Artifacts (JARs)
        uses: actions/upload-artifact@v4
        with:
          name: java-artifacts
          path: |
            **/target/*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar

  # -----------------------------------------------------------
  # JOB 2: Build du Frontend (Vue/Vite)
  # -----------------------------------------------------------
  frontend_build:
    name: Build Frontend (Node.js)
    runs-on: ubuntu-latest
    needs: java_build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: npm install
        working-directory: ./frontend

      - name: Run Frontend Build (Vite)
        run: npm run build
        working-directory: ./frontend

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend/dist

  # -----------------------------------------------------------
  # JOB 3: Versioning, Release, et Déclenchement du Déploiement
  # -----------------------------------------------------------
  release_and_versioning:
    name: Automated Versioning (Release Please)
    runs-on: ubuntu-latest

    needs: [java_build, frontend_build]

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write
      pull-requests: write
      actions: write # Autorise l'appel d'API pour le repository_dispatch

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Zip Utility
        run: sudo apt-get install zip -y

      - name: Download Java Artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-artifacts
          path: ./java-artifacts-to-upload

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./frontend-artifacts-to-upload

      # 1. Exécuter Release Please
      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: simple
          # Passage explicite du token corrigé
          token: ${{ secrets.GITHUB_TOKEN }}

      # Les étapes suivantes ne s'exécutent que si une NOUVELLE RELEASE est créée
      - name: Zip Java Artifacts
        if: ${{ steps.release.outputs.release_created }}
        run: zip -r ./java-artifacts-to-upload/java-artifacts.zip ./java-artifacts-to-upload/

      - name: Zip Frontend Artifact
        if: ${{ steps.release.outputs.release_created }}
        run: zip -r ./frontend-artifacts-to-upload/frontend-dist.zip ./frontend-artifacts-to-upload/

      # 2. UPLOAD des Assets
      - name: Upload Java Artifacts to Release
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./java-artifacts-to-upload/java-artifacts.zip
          asset_name: java-artifacts-${{ steps.release.outputs.tag_name }}.zip
          asset_content_type: application/zip

      - name: Upload Frontend Artifact to Release
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./frontend-artifacts-to-upload/frontend-dist.zip
          asset_name: frontend-dist-${{ steps.release.outputs.tag_name }}.zip
          asset_content_type: application/zip

      # 3. DÉCLENCHEMENT DU DÉPLOIEMENT VIA API (repository_dispatch)
      # Ceci est la solution anti-blocage.
      - name: Dispatch Deployment Trigger
        if: ${{ steps.release.outputs.release_created }}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Utilise le jeton avec 'actions: write'
          event-type: trigger_deploy # Nom du déclencheur écouté par le second workflow
          client-payload: '{"tag_name": "${{ steps.release.outputs.tag_name }}", "repository": "${{ github.repository }}"}'
