// src/services/gamesService.js
import apiClient from './apiClient';

class GamesService {
    /**
     * Recherche des jeux disponibles via le Games Service.
     * @param {string} query Terme de recherche.
     * @returns {Promise<Array>} Liste des jeux trouv√©s.
     */
    async searchGames(query = '') {
        try {
            // L'URL du Gateway est /api/games.
            // Le Gateway le route vers le service interne /api/games.
            // Le param√®tre doit √™tre 'search' pour correspondre au contr√¥leur Spring.
            const response = await apiClient.get('/games', {
                params: {
                    search: query // üü¢ CORRECTION: Utilise 'search'
                }
            });

            // Le backend renvoie une List<Game>, nous la renvoyons directement
            return response.data;
        } catch (error) {
            console.error("Erreur lors de la recherche des jeux:", error);
            throw error;
        }
    }

    /**
     * R√©cup√®re les d√©tails complets d'un jeu sp√©cifique par son ID.
     * @param {number} gameId L'ID du jeu RAWG.
     * @returns {Promise<Object>} Les d√©tails du jeu (RawgGameDetailsResponse).
     */
    async getGameDetails(gameId) {
        if (!gameId) {
            throw new Error("L'ID du jeu est requis pour r√©cup√©rer les d√©tails.");
        }
        try {
            // Endpoint Spring Boot: /api/games/{gameId}/details
            const response = await apiClient.get(`/games/${gameId}/details`);

            // Le backend renvoie RawgGameDetailsResponse
            return response.data;
        } catch (error) {
            console.error(`Erreur lors de la r√©cup√©ration des d√©tails du jeu ID ${gameId}:`, error);
            throw error;
        }
    }

    /**
     * R√©cup√®re la liste des bandes-annonces (trailers) pour un jeu sp√©cifique.
     * @param {number} gameId L'ID du jeu RAWG.
     * @returns {Promise<Object>} La r√©ponse des trailers (RawgTrailerResponse).
     */
    async getGameTrailers(gameId) {
        if (!gameId) {
            throw new Error("L'ID du jeu est requis pour r√©cup√©rer les trailers.");
        }
        try {
            // Endpoint Spring Boot: /api/games/{gameId}/trailers
            const response = await apiClient.get(`/games/${gameId}/trailers`);

            // Le backend renvoie RawgTrailerResponse
            return response.data;
        } catch (error) {
            console.error(`Erreur lors de la r√©cup√©ration des trailers du jeu ID ${gameId}:`, error);
            throw error;
        }
    }

    /**
     * R√©cup√®re la liste des captures d'√©cran (screenshots) pour un jeu sp√©cifique.
     * @param {number} gameId L'ID du jeu RAWG.
     * @returns {Promise<Object>} La r√©ponse des captures d'√©cran (RawgScreenshotResponse).
     */
    async getGameScreenshots(gameId) {
        if (!gameId) {
            throw new Error("L'ID du jeu est requis pour r√©cup√©rer les captures d'√©cran.");
        }
        try {
            // Endpoint Spring Boot: /api/games/{gameId}/screenshots
            const response = await apiClient.get(`/games/${gameId}/screenshots`);

            // Le backend renvoie RawgScreenshotResponse
            return response.data;
        } catch (error) {
            console.error(`Erreur lors de la r√©cup√©ration des captures d'√©cran du jeu ID ${gameId}:`, error);
            throw error;
        }
    }
}

export default new GamesService();